condition = "input.show_data == true",
tags$div(class = "output-box", dataTableOutput("dataTable"))
),
textOutput("prediction_result")  # Moved inside the mainPanel
)
)
)
# Dashboard Tab
tabPanel("Dashboard",
sidebarLayout(
sidebarPanel(
class = "sidebar",
h4("Customize the Plot", style = "color: #0078d7; font-weight: bold;"),
p("Select variables and appearance settings to visualize the data.",
style = "color: #0078d7; font-style: italic;"),
radioButtons("plot_type", "Choose Plot Type:",
choices = c("Scatter Plot", "Line Chart", "Bar Chart", "Heatmap", "Treemap"),
selected = "Scatter Plot"),
selectInput("x_var", "Select X-axis variable:",
choices = names(forest_n), selected = "temp"),
conditionalPanel(
condition = "input.plot_type == 'Scatter Plot' || input.plot_type == 'Line Chart' || input.plot_type == 'Heatmap'",
selectInput("y_var", "Select Y-axis variable:",
choices = names(forest_n), selected = "rain")
),
colourpicker::colourInput("plot_color", "Plot Color:", value = "#0078d7"),
conditionalPanel(
condition = "input.plot_type == 'Scatter Plot'",
sliderInput("point_size", "Point Size:",
min = 1, max = 5, value = 3)
),
checkboxInput("show_data", "Show Data Table", value = TRUE)
),
# Prediction Section
h4("Prediction Tool", style = "color: #0078d7; font-weight: bold;"),
numericInput("predict_input", "Enter a value for prediction:", value = 0, min = -100, max = 100),
actionButton("predict_btn", "Predict", class = "btn-primary"),
mainPanel(
tags$div(class = "plot-area", plotOutput("mainPlot")),
conditionalPanel(
condition = "input.show_data == true",
tags$div(class = "output-box", dataTableOutput("dataTable"))
),
textOutput("prediction_result")  # Moved inside the mainPanel
)
)
)
tabPanel("Dashboard",
sidebarLayout(
sidebarPanel(
class = "sidebar",
h4("Customize the Plot", style = "color: #0078d7; font-weight: bold;"),
p("Select variables and appearance settings to visualize the data.",
style = "color: #0078d7; font-style: italic;"),
radioButtons("plot_type", "Choose Plot Type:",
choices = c("Scatter Plot", "Line Chart", "Bar Chart", "Heatmap", "Treemap"),
selected = "Scatter Plot"),
selectInput("x_var", "Select X-axis variable:",
choices = names(forest_n), selected = "temp"),
conditionalPanel(
condition = "input.plot_type == 'Scatter Plot' || input.plot_type == 'Line Chart' || input.plot_type == 'Heatmap'",
selectInput("y_var", "Select Y-axis variable:",
choices = names(forest_n), selected = "rain")
),
colourpicker::colourInput("plot_color", "Plot Color:", value = "#0078d7"),
conditionalPanel(
condition = "input.plot_type == 'Scatter Plot'",
sliderInput("point_size", "Point Size:",
min = 1, max = 5, value = 3)
),
checkboxInput("show_data", "Show Data Table", value = TRUE),
# Prediction Section inside sidebarPanel
h4("Prediction Tool", style = "color: #0078d7; font-weight: bold;"),
numericInput("predict_input", "Enter a value for prediction:", value = 0, min = -100, max = 100),
actionButton("predict_btn", "Predict", class = "btn-primary")
),
mainPanel(
tags$div(class = "plot-area", plotOutput("mainPlot")),
conditionalPanel(
condition = "input.show_data == true",
tags$div(class = "output-box", dataTableOutput("dataTable"))
),
# Prediction output in mainPanel
textOutput("prediction_result")
)
)
)
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
library(plotly)
library(plotly)
library(plotly)
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
library(shiny)
library(DT)
library(colourpicker)  # Make sure this is loaded
library(ggplot2)
library(treemap)
library(shinyjs)  # Add this for JavaScript-based tab switching
# Placeholder for user data (temporary in-memory storage)
user_data <- reactiveVal(data.frame(
username = character(),
password = character(),
stringsAsFactors = FALSE
))
# Sample dataset (use your actual forest_n dataset if it exists)
if (!exists("forest_n")) {
forest_n <- data.frame(
temp = rnorm(100, mean = 20, sd = 5),
rain = rnorm(100, mean = 10, sd = 2),
wind = rnorm(100, mean = 5, sd = 1)
)
}
# Define the UI
ui <- navbarPage(
id = "navbar",  # Adding an ID for the navbarPage so that it can be updated in server
title = "Forest Fire Prediction Dashboard",
# Set Home as the selected tab by default
selected = "Home",  # Add this line
# Include the dark theme CSS
tags$head(
tags$style(HTML("
body {
background-image: url('D:/PBI/Background.jpg');
background-size: cover;
background-attachment: fixed;
color: #4a4a4a; /* Dark gray for text */
font-family: 'Open Sans', Arial, sans-serif; /* Modern font */
}
.navbar {
background-color: #ffffff !important;
color: #333333; /* Dark gray text */
}
.navbar-brand, .navbar-nav .nav-link {
color: #0078d7 !important;
}
h1 {
color: #ADD8E6;
text-align: center;
padding: 10px;
font-weight: bold;
font-size: 2.5em;
margin-bottom: 20px;
text-transform: uppercase;
}
.sidebar {
background-color: #f5f5f5; /* Light gray sidebar */
padding: 15px;
border-radius: 8px;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Subtle shadow */
color: #333333;
}
.output-box {
background-color: #ffffff; /* White output area */
color: #333333;
padding: 15px;
border-radius: 8px;
text-align: center;
font-size: 1.2em;
margin-top: 20px;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Subtle shadow */
}
.plot-area {
background-color: #ffffff; /* White plot area */
padding: 15px;
border-radius: 8px;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Subtle shadow */
}
.footer {
background-color: #ffffff; /* White footer */
color: #0078d7; /* Accent blue */
padding: 10px;
text-align: center;
font-size: 1em;
position: fixed;
bottom: 0;
width: 100%;
}
.landing-page {
text-align: center;
padding: 50px;
color: #4a4a4a; /* Dark gray text */
}
.landing-page .header {
font-size: 3em;
font-weight: bold;
color: #0078d7; /* Accent blue */
margin-bottom: 20px;
}
.landing-page .subheader {
font-size: 1.2em;
margin-bottom: 40px;
color: #4a4a4a; /* Dark gray text */
}
.landing-page .btn-primary {
background-color: #0078d7; /* DashThis blue */
border: none;
font-size: 1.2em;
padding: 15px 30px;
border-radius: 8px;
text-transform: uppercase;
color: white;
}
.landing-page .btn-primary:hover {
background-color: #005bb5; /* Darker blue on hover */
}
.features-section {
margin-top: 50px;
display: flex;
justify-content: center;
gap: 30px;
}
.feature-card {
background-color: #f5f5f5; /* Light gray cards */
padding: 20px;
border-radius: 8px;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Subtle shadow */
text-align: left;
color: #4a4a4a; /* Dark gray text */
width: 30%;
}
.feature-card h4 {
color: #0078d7; /* Accent blue */
margin-bottom: 10px;
}
"))
),
# Registration Page
tabPanel(
"Register",
fluidPage(
useShinyjs(),
h1("Register", class = "header"),
textInput("register_user", "Username:", placeholder = "Create your username"),
passwordInput("register_pass", "Password:", placeholder = "Create your password"),
actionButton("register_btn", "Register", class = "btn-primary"),
br(),
br(),
actionButton("go_to_login", "Back to Login", class = "btn-secondary"),
textOutput("register_status")
)
),
# Login Page
tabPanel(
"Login",
fluidPage(
useShinyjs(),
h1("Login", class = "header"),
textInput("login_user", "Username:", placeholder = "Enter your username"),
passwordInput("login_pass", "Password:", placeholder = "Enter your password"),
actionButton("login_btn", "Login", class = "btn-primary"),
br(),
br(),
actionButton("go_to_register", "Register", class = "btn-secondary"),
textOutput("login_status")
)
),
# Landing Page Tab
tabPanel(
"Home",
fluidPage(
useShinyjs(),
tags$div(class = "landing-page",
# Add top right buttons
tags$div(
class = "btn-corner",
actionButton("go_to_login", "Login", class = "btn-primary"),
actionButton("go_to_register", "Register", class = "btn-primary")
),
tags$div(class = "header", "Welcome to Forest Fire Prediction Dashboard"),
tags$div(class = "subheader",
"An interactive tool to analyze environmental factors and predict fire risks."),
# Existing buttons
actionButton("go_to_dashboard", "Explore Dashboard", class = "btn-primary"),
actionButton("go_to_about", "About", class = "btn-primary"),
# Features Section (remains the same)
tags$div(class = "features-section",
tags$div(class = "feature-card",
h4("Data Visualization"),
p("Create stunning scatter plots, line charts, bar graphs, heatmaps, and treemaps.")
),
tags$div(class = "feature-card",
h4("Predictive Modeling"),
p("Use our simple model to predict outcomes based on your data inputs.")
),
tags$div(class = "feature-card",
h4("Interactive Insights"),
p("Explore data in an interactive table and visualize correlations.")
)
),
# Prediction input box (remains the same)
tags$div(class = "output-box",
numericInput("predict_input_home", "Enter X Value for Prediction:", value = 20),
actionButton("predict_btn_home", "Predict"),
textOutput("predictionResult_home")
)
)
)
),
# Dashboard Tab
tabPanel("Dashboard",
sidebarLayout(
sidebarPanel(
class = "sidebar",
h4("Customize the Plot", style = "color: #0078d7; font-weight: bold;"),
p("Select variables and appearance settings to visualize the data.",
style = "color: #0078d7; font-style: italic;"),
radioButtons("plot_type", "Choose Plot Type:",
choices = c("Scatter Plot", "Line Chart", "Bar Chart", "Heatmap", "Treemap"),
selected = "Scatter Plot"),
selectInput("x_var", "Select X-axis variable:",
choices = names(forest_n), selected = "temp"),
conditionalPanel(
condition = "input.plot_type == 'Scatter Plot' || input.plot_type == 'Line Chart' || input.plot_type == 'Heatmap'",
selectInput("y_var", "Select Y-axis variable:",
choices = names(forest_n), selected = "rain")
),
colourpicker::colourInput("plot_color", "Plot Color:", value = "#0078d7"),
conditionalPanel(
condition = "input.plot_type == 'Scatter Plot'",
sliderInput("point_size", "Point Size:",
min = 1, max = 5, value = 3)
),
checkboxInput("show_data", "Show Data Table", value = TRUE)
),
mainPanel(
tags$div(class = "plot-area", plotOutput("mainPlot")),
conditionalPanel(
condition = "input.show_data == true",
tags$div(class = "output-box", dataTableOutput("dataTable"))
)
)
)
),
# About Tab
tabPanel("About",
fluidPage(
h3("About This Web Application", style = "color: #0078d7;"),
p("Welcome to the Forest Fire Prediction Dashboard, an interactive tool designed to help researchers, environmentalists, and anyone interested in understanding and predicting the risk of forest fires based on various environmental variables. This web application combines predictive modeling with dynamic visualizations to assist in exploring, analyzing, and interpreting forest fire-related data."),
br(),
h4("What This Web Application Does", style = "color: #0078d7; font-weight: bold;"),
p("The Forest Fire Prediction Dashboard provides users with the following key features:"),
tags$ul(
tags$li("Data Visualization: Create and explore multiple types of plots and charts, including scatter plots, line charts, bar charts, heatmaps, and treemaps."),
tags$li("Predictive Modeling: The app includes a simple linear regression model to predict forest fire outcomes based on environmental data."),
tags$li("Interactive Data Exploration: The application offers an interactive data table for users to sort, filter, and explore individual data points."),
tags$li("Educational Insights: Designed to help users understand the relationship between environmental data and forest fire risk.")
),
br(),
h4("Purpose of the Web Application", style = "color: #0078d7; font-weight: bold;"),
p("The Forest Fire Prediction Dashboard was created to achieve the following goals:"),
tags$ul(
tags$li("Assist Researchers and Environmentalists: Provide an interactive platform to visualize and predict forest fire risk."),
tags$li("Predict Forest Fires Using Data: Help prevent or mitigate the impact of wildfires by predicting future fire risks."),
tags$li("Educate the Public: Raise awareness about the causes of forest fires and how they can be predicted."),
tags$li("Empower Data-Driven Decision Making: Support data-driven decision-making with insights drawn from environmental data.")
),
br(),
h4("Developers Behind the Web Application", style = "color: #0078d7; font-weight: bold;"),
p("The web application was developed by:"),
tags$ul(
tags$li("Vicky Swain – Creator of the Web Application"),
tags$li("Shreyansh Sharma – Creator of the Dashboard")
),
br(),
h4("Conclusion", style = "color: #0078d7; font-weight: bold;"),
p("The Forest Fire Prediction Dashboard is a versatile tool that helps predict forest fire risk and educates users about environmental factors that contribute to forest fires. It was developed by Vicky Swain and Shreyansh Sharma to support efforts in forest conservation and fire prevention."),
br(),
p("Forest Fire Prediction Dashboard - Created by Shreyansh Sharma and Vicky Swain.", style = "text-align: center; color: #0078d7;")
)
)
)
# Define the Server Logic
server <- function(input, output, session) {
# Registration logic
observeEvent(input$register_btn, {
username <- input$register_user
password <- input$register_pass
users <- user_data()
if (username %in% users$username) {
output$register_status <- renderText("Username already exists.")
} else if (username == "" || password == "") {
output$register_status <- renderText("Please fill in all fields.")
} else {
users <- rbind(users, data.frame(username = username, password = password, stringsAsFactors = FALSE))
user_data(users)
output$register_status <- renderText("Registration successful! Please log in.")
}
})
# Login logic
observeEvent(input$login_btn, {
username <- input$login_user
password <- input$login_pass
users <- user_data()
if (username %in% users$username) {
if (password == users$password[users$username == username]) {
output$login_status <- renderText("")
updateTabsetPanel(session, "navbar", selected = "Home")
output$login_greeting <- renderText(paste("Welcome,", username, "!"))
} else {
output$login_status <- renderText("Incorrect password.")
}
} else {
output$login_status <- renderText("Username not found.")
}
})
# Navigation between Login and Registration
observeEvent(input$go_to_register, {
updateTabsetPanel(session, "navbar", selected = "Register")
})
observeEvent(input$go_to_login, {
updateTabsetPanel(session, "navbar", selected = "Login")
})
# Home page prediction logic
observeEvent(input$predict_btn_home, {
prediction_value <- input$predict_input_home * 2.5  # Example prediction logic
output$predictionResult_home <- renderText({
paste("Predicted value: ", prediction_value)
})
})
# Switch to Dashboard tab when the Explore Dashboard button is clicked
observeEvent(input$go_to_dashboard, {
updateTabsetPanel(session, "navbar", selected = "Dashboard")
})
# Switch to Dashboard tab when the About button is clicked
observeEvent(input$go_to_about, {
updateTabsetPanel(session, "navbar", selected = "About")
})
# Dashboard plot rendering based on user input
output$mainPlot <- renderPlot({
if (input$plot_type == "Scatter Plot") {
ggplot(forest_n, aes_string(x = input$x_var, y = input$y_var)) +
geom_point(color = input$plot_color, size = input$point_size) +
theme_minimal() +
ggtitle("Scatter Plot")
} else if (input$plot_type == "Line Chart") {
ggplot(forest_n, aes_string(x = input$x_var, y = input$y_var)) +
geom_line(color = input$plot_color, size = input$point_size) +
theme_minimal() +
ggtitle("Line Chart")
} else if (input$plot_type == "Bar Chart") {
ggplot(forest_n, aes_string(x = input$x_var, y = input$y_var)) +
geom_bar(stat = "identity", fill = input$plot_color) +
theme_minimal() +
ggtitle("Bar Chart")
} else if (input$plot_type == "Heatmap") {
ggplot(forest_n, aes_string(x = input$x_var, y = input$y_var)) +
geom_tile(aes(fill = ..count..)) +
scale_fill_gradient(low = "white", high = input$plot_color) +
theme_minimal() +
ggtitle("Heatmap")
} else if (input$plot_type == "Treemap") {
# Example of a simple treemap (you might need additional libraries to handle it fully)
treemap_data <- data.frame(
category = sample(c("A", "B", "C", "D"), 100, replace = TRUE),
value = rnorm(100)
)
treemap(treemap_data, index = c("category"), vSize = "value", vColor = "value", draw = TRUE)
}
})
# Data table rendering
output$dataTable <- renderDataTable({
forest_n
})
}
# Run the Application
shinyApp(ui = ui, server = server)
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
runApp('D:/RStudio/Project/WEBAPP.R')
install.packages("sendgridr")
install.packages("sendgridr")
library(sendgridr)
yes
version
q()
